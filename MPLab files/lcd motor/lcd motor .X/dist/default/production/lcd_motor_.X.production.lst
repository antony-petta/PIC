

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Aug 06 09:53:32 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17   000000                     
    18                           ; Generated 17/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4580 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52   000000                     _RC2	set	31762
    53   000000                     _RC1	set	31761
    54   000000                     _RC0	set	31760
    55   000000                     _RB6	set	31758
    56   000000                     _RC4	set	31764
    57   000000                     _RC3	set	31763
    58   000000                     _RC6	set	31766
    59   000000                     _TRISB	set	3987
    60   000000                     _TRISC	set	3988
    61   000000                     _RB7	set	31759
    62   000000                     _RC5	set	31765
    63   000000                     _TRISD	set	3989
    64   000000                     _PORTD	set	3971
    65                           
    66                           	psect	smallconst
    67   000600                     __psmallconst:
    68                           	callstack 0
    69   000600  00                 	db	0
    70   000601                     STR_6:
    71   000601  21                 	db	33
    72   000602  21                 	db	33
    73   000603  21                 	db	33
    74   000604  21                 	db	33
    75   000605  21                 	db	33
    76   000606  21                 	db	33
    77   000607  21                 	db	33
    78   000608  21                 	db	33
    79   000609  73                 	db	115	;'s'
    80   00060A  74                 	db	116	;'t'
    81   00060B  6F                 	db	111	;'o'
    82   00060C  70                 	db	112	;'p'
    83   00060D  21                 	db	33
    84   00060E  21                 	db	33
    85   00060F  21                 	db	33
    86   000610  21                 	db	33
    87   000611  21                 	db	33
    88   000612  21                 	db	33
    89   000613  21                 	db	33
    90   000614  21                 	db	33
    91   000615  00                 	db	0
    92   000616                     STR_3:
    93   000616  73                 	db	115	;'s'
    94   000617  74                 	db	116	;'t'
    95   000618  6F                 	db	111	;'o'
    96   000619  70                 	db	112	;'p'
    97   00061A  21                 	db	33
    98   00061B  21                 	db	33
    99   00061C  20                 	db	32
   100   00061D  20                 	db	32
   101   00061E  20                 	db	32
   102   00061F  20                 	db	32
   103   000620  20                 	db	32
   104   000621  20                 	db	32
   105   000622  20                 	db	32
   106   000623  20                 	db	32
   107   000624  20                 	db	32
   108   000625  20                 	db	32
   109   000626  20                 	db	32
   110   000627  00                 	db	0
   111   000628                     STR_1:
   112   000628  63                 	db	99	;'c'
   113   000629  6C                 	db	108	;'l'
   114   00062A  6F                 	db	111	;'o'
   115   00062B  63                 	db	99	;'c'
   116   00062C  6B                 	db	107	;'k'
   117   00062D  77                 	db	119	;'w'
   118   00062E  69                 	db	105	;'i'
   119   00062F  73                 	db	115	;'s'
   120   000630  65                 	db	101	;'e'
   121   000631  3E                 	db	62	;'>'
   122   000632  3E                 	db	62	;'>'
   123   000633  20                 	db	32
   124   000634  20                 	db	32
   125   000635  20                 	db	32
   126   000636  20                 	db	32
   127   000637  20                 	db	32
   128   000638  00                 	db	0
   129   000639                     STR_4:
   130   000639  63                 	db	99	;'c'
   131   00063A  6C                 	db	108	;'l'
   132   00063B  6F                 	db	111	;'o'
   133   00063C  63                 	db	99	;'c'
   134   00063D  6B                 	db	107	;'k'
   135   00063E  77                 	db	119	;'w'
   136   00063F  69                 	db	105	;'i'
   137   000640  73                 	db	115	;'s'
   138   000641  65                 	db	101	;'e'
   139   000642  3E                 	db	62	;'>'
   140   000643  3E                 	db	62	;'>'
   141   000644  20                 	db	32
   142   000645  20                 	db	32
   143   000646  20                 	db	32
   144   000647  20                 	db	32
   145   000648  00                 	db	0
   146   000649                     STR_2:
   147   000649  61                 	db	97	;'a'
   148   00064A  6E                 	db	110	;'n'
   149   00064B  74                 	db	116	;'t'
   150   00064C  69                 	db	105	;'i'
   151   00064D  63                 	db	99	;'c'
   152   00064E  6C                 	db	108	;'l'
   153   00064F  6F                 	db	111	;'o'
   154   000650  63                 	db	99	;'c'
   155   000651  6B                 	db	107	;'k'
   156   000652  77                 	db	119	;'w'
   157   000653  69                 	db	105	;'i'
   158   000654  73                 	db	115	;'s'
   159   000655  65                 	db	101	;'e'
   160   000656  3C                 	db	60	;'<'
   161   000657  3C                 	db	60	;'<'
   162   000658  00                 	db	0
   163   000659  00                 	db	0	; dummy byte at the end
   164   000000                     
   165                           ; #config settings
   166                           
   167                           	psect	cinit
   168   000964                     __pcinit:
   169                           	callstack 0
   170   000964                     start_initialization:
   171                           	callstack 0
   172   000964                     __initialization:
   173                           	callstack 0
   174   000964                     end_of_initialization:
   175                           	callstack 0
   176   000964                     __end_of__initialization:
   177                           	callstack 0
   178   000964  0E00               	movlw	low (__Lsmallconst shr (0+16))
   179   000966  6EF8               	movwf	tblptru,c
   180   000968  0E06               	movlw	high __Lsmallconst
   181   00096A  6EF7               	movwf	tblptrh,c
   182   00096C  0100               	movlb	0
   183   00096E  EF2D  F003         	goto	_main	;jump to C main() function
   184                           
   185                           	psect	cstackCOMRAM
   186   000001                     __pcstackCOMRAM:
   187                           	callstack 0
   188   000001                     motor1@m:
   189                           	callstack 0
   190   000001                     motor2@x:
   191                           	callstack 0
   192   000001                     delay@time:
   193                           	callstack 0
   194                           
   195                           ; 4 bytes @ 0x0
   196   000001                     	ds	2
   197   000003                     motor1@n:
   198                           	callstack 0
   199   000003                     motor2@y:
   200                           	callstack 0
   201                           
   202                           ; 2 bytes @ 0x2
   203   000003                     	ds	2
   204   000005                     ??_delay:
   205                           
   206                           ; 1 bytes @ 0x4
   207   000005                     	ds	1
   208   000006                     delay@i:
   209                           	callstack 0
   210                           
   211                           ; 4 bytes @ 0x5
   212   000006                     	ds	4
   213   00000A                     lcdctrl@a:
   214                           	callstack 0
   215   00000A                     lcddisp@b:
   216                           	callstack 0
   217                           
   218                           ; 1 bytes @ 0x9
   219   00000A                     	ds	1
   220   00000B                     lcdstring@p:
   221                           	callstack 0
   222                           
   223                           ; 1 bytes @ 0xA
   224   00000B                     	ds	1
   225   00000C                     main@c1:
   226                           	callstack 0
   227                           
   228                           ; 2 bytes @ 0xB
   229   00000C                     	ds	2
   230   00000E                     main@c2:
   231                           	callstack 0
   232                           
   233                           ; 2 bytes @ 0xD
   234   00000E                     	ds	2
   235                           
   236 ;;
   237 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   238 ;;
   239 ;; *************** function _main *****************
   240 ;; Defined at:
   241 ;;		line 9 in file "lcd_motor.c"
   242 ;; Parameters:    Size  Location     Type
   243 ;;		None
   244 ;; Auto vars:     Size  Location     Type
   245 ;;  c2              2   13[COMRAM] int 
   246 ;;  c1              2   11[COMRAM] int 
   247 ;; Return value:  Size  Location     Type
   248 ;;                  1    wreg      void 
   249 ;; Registers used:
   250 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   251 ;; Tracked objects:
   252 ;;		On entry : 0/0
   253 ;;		On exit  : 0/0
   254 ;;		Unchanged: 0/0
   255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   256 ;;      Params:         0       0       0       0       0       0       0
   257 ;;      Locals:         4       0       0       0       0       0       0
   258 ;;      Temps:          0       0       0       0       0       0       0
   259 ;;      Totals:         4       0       0       0       0       0       0
   260 ;;Total ram usage:        4 bytes
   261 ;; Hardware stack levels required when called: 3
   262 ;; This function calls:
   263 ;;		_lcdctrl
   264 ;;		_lcdstring
   265 ;;		_motor1
   266 ;;		_motor2
   267 ;; This function is called by:
   268 ;;		Startup code after reset
   269 ;; This function uses a non-reentrant model
   270 ;;
   271                           
   272                           	psect	text0
   273   00065A                     __ptext0:
   274                           	callstack 0
   275   00065A                     _main:
   276                           	callstack 28
   277   00065A                     
   278                           ;lcd_motor.c: 10:     TRISC=0x60;
   279   00065A  0E60               	movlw	96
   280   00065C  6E94               	movwf	148,c	;volatile
   281                           
   282                           ;lcd_motor.c: 11:     TRISD=0x00;
   283   00065E  0E00               	movlw	0
   284   000660  6E95               	movwf	149,c	;volatile
   285                           
   286                           ;lcd_motor.c: 12:     TRISB=0x00;
   287   000662  0E00               	movlw	0
   288   000664  6E93               	movwf	147,c	;volatile
   289   000666                     
   290                           ;lcd_motor.c: 13:     lcdctrl(0x01);
   291   000666  0E01               	movlw	1
   292   000668  EC5A  F004         	call	_lcdctrl
   293   00066C                     
   294                           ;lcd_motor.c: 14:     lcdctrl(0x0c);
   295   00066C  0E0C               	movlw	12
   296   00066E  EC5A  F004         	call	_lcdctrl
   297   000672                     
   298                           ;lcd_motor.c: 15:     lcdctrl(0x38);
   299   000672  0E38               	movlw	56
   300   000674  EC5A  F004         	call	_lcdctrl
   301   000678                     
   302                           ;lcd_motor.c: 16:     int c1=-1;
   303   000678  680C               	setf	main@c1^0,c
   304   00067A  680D               	setf	(main@c1+1)^0,c
   305   00067C                     
   306                           ;lcd_motor.c: 17:     int c2=-1;
   307   00067C  680E               	setf	main@c2^0,c
   308   00067E  680F               	setf	(main@c2+1)^0,c
   309   000680                     l922:
   310                           
   311                           ;lcd_motor.c: 19:         if(RC5==1){
   312   000680  AA82               	btfss	3970,5,c	;volatile
   313   000682  EF45  F003         	goto	u331
   314   000686  EF47  F003         	goto	u330
   315   00068A                     u331:
   316   00068A  EFAB  F003         	goto	l950
   317   00068E                     u330:
   318   00068E                     
   319                           ;lcd_motor.c: 20:             if(c1==2){
   320   00068E  0E02               	movlw	2
   321   000690  180C               	xorwf	main@c1^0,w,c
   322   000692  100D               	iorwf	(main@c1+1)^0,w,c
   323   000694  A4D8               	btfss	status,2,c
   324   000696  EF4F  F003         	goto	u341
   325   00069A  EF51  F003         	goto	u340
   326   00069E                     u341:
   327   00069E  EF53  F003         	goto	l928
   328   0006A2                     u340:
   329   0006A2                     
   330                           ;lcd_motor.c: 21:                 c1=-1;
   331   0006A2  680C               	setf	main@c1^0,c
   332   0006A4  680D               	setf	(main@c1+1)^0,c
   333   0006A6                     l928:
   334                           
   335                           ;lcd_motor.c: 23:             c1++;
   336   0006A6  4A0C               	infsnz	main@c1^0,f,c
   337   0006A8  2A0D               	incf	(main@c1+1)^0,f,c
   338   0006AA                     l42:
   339   0006AA  BA82               	btfsc	3970,5,c	;volatile
   340   0006AC  EF5A  F003         	goto	u351
   341   0006B0  EF5C  F003         	goto	u350
   342   0006B4                     u351:
   343   0006B4  EF55  F003         	goto	l42
   344   0006B8                     u350:
   345   0006B8                     
   346                           ;lcd_motor.c: 25:         lcdctrl(0x80);
   347   0006B8  0E80               	movlw	128
   348   0006BA  EC5A  F004         	call	_lcdctrl
   349   0006BE                     
   350                           ;lcd_motor.c: 26:         if(c1==0){
   351   0006BE  500C               	movf	main@c1^0,w,c
   352   0006C0  100D               	iorwf	(main@c1+1)^0,w,c
   353   0006C2  A4D8               	btfss	status,2,c
   354   0006C4  EF66  F003         	goto	u361
   355   0006C8  EF68  F003         	goto	u360
   356   0006CC                     u361:
   357   0006CC  EF78  F003         	goto	l938
   358   0006D0                     u360:
   359   0006D0                     
   360                           ;lcd_motor.c: 28:             motor1(0,1);
   361   0006D0  0E00               	movlw	0
   362   0006D2  6E02               	movwf	(motor1@m+1)^0,c
   363   0006D4  0E00               	movlw	0
   364   0006D6  6E01               	movwf	motor1@m^0,c
   365   0006D8  0E00               	movlw	0
   366   0006DA  6E04               	movwf	(motor1@n+1)^0,c
   367   0006DC  0E01               	movlw	1
   368   0006DE  6E03               	movwf	motor1@n^0,c
   369   0006E0  EC9F  F004         	call	_motor1	;wreg free
   370   0006E4                     
   371                           ;lcd_motor.c: 29:             lcdstring("clockwise>>     ");
   372   0006E4  0E28               	movlw	low STR_1
   373   0006E6  6E0B               	movwf	lcdstring@p^0,c
   374   0006E8  EC76  F004         	call	_lcdstring	;wreg free
   375                           
   376                           ;lcd_motor.c: 30:         }
   377   0006EC  EFAB  F003         	goto	l950
   378   0006F0                     l938:
   379   0006F0  040C               	decf	main@c1^0,w,c
   380   0006F2  100D               	iorwf	(main@c1+1)^0,w,c
   381   0006F4  A4D8               	btfss	status,2,c
   382   0006F6  EF7F  F003         	goto	u371
   383   0006FA  EF81  F003         	goto	u370
   384   0006FE                     u371:
   385   0006FE  EF91  F003         	goto	l944
   386   000702                     u370:
   387   000702                     
   388                           ;lcd_motor.c: 33:             motor1(1,0);
   389   000702  0E00               	movlw	0
   390   000704  6E02               	movwf	(motor1@m+1)^0,c
   391   000706  0E01               	movlw	1
   392   000708  6E01               	movwf	motor1@m^0,c
   393   00070A  0E00               	movlw	0
   394   00070C  6E04               	movwf	(motor1@n+1)^0,c
   395   00070E  0E00               	movlw	0
   396   000710  6E03               	movwf	motor1@n^0,c
   397   000712  EC9F  F004         	call	_motor1	;wreg free
   398   000716                     
   399                           ;lcd_motor.c: 34:             lcdstring("anticlockwise<<");
   400   000716  0E49               	movlw	low STR_2
   401   000718  6E0B               	movwf	lcdstring@p^0,c
   402   00071A  EC76  F004         	call	_lcdstring	;wreg free
   403                           
   404                           ;lcd_motor.c: 35:         }
   405   00071E  EFAB  F003         	goto	l950
   406   000722                     l944:
   407   000722  0E02               	movlw	2
   408   000724  180C               	xorwf	main@c1^0,w,c
   409   000726  100D               	iorwf	(main@c1+1)^0,w,c
   410   000728  A4D8               	btfss	status,2,c
   411   00072A  EF99  F003         	goto	u381
   412   00072E  EF9B  F003         	goto	u380
   413   000732                     u381:
   414   000732  EFAB  F003         	goto	l46
   415   000736                     u380:
   416   000736                     
   417                           ;lcd_motor.c: 38:             motor1(0,0);
   418   000736  0E00               	movlw	0
   419   000738  6E02               	movwf	(motor1@m+1)^0,c
   420   00073A  0E00               	movlw	0
   421   00073C  6E01               	movwf	motor1@m^0,c
   422   00073E  0E00               	movlw	0
   423   000740  6E04               	movwf	(motor1@n+1)^0,c
   424   000742  0E00               	movlw	0
   425   000744  6E03               	movwf	motor1@n^0,c
   426   000746  EC9F  F004         	call	_motor1	;wreg free
   427   00074A                     
   428                           ;lcd_motor.c: 39:             lcdstring("stop!!           ");
   429   00074A  0E16               	movlw	low STR_3
   430   00074C  6E0B               	movwf	lcdstring@p^0,c
   431   00074E  EC76  F004         	call	_lcdstring	;wreg free
   432   000752  EFAB  F003         	goto	l950
   433   000756                     l46:
   434   000756                     l950:
   435                           
   436                           ;lcd_motor.c: 42:         if(RC6==1){
   437   000756  AC82               	btfss	3970,6,c	;volatile
   438   000758  EFB0  F003         	goto	u391
   439   00075C  EFB2  F003         	goto	u390
   440   000760                     u391:
   441   000760  EF40  F003         	goto	l922
   442   000764                     u390:
   443   000764                     
   444                           ;lcd_motor.c: 44:             if(c2==2){
   445   000764  0E02               	movlw	2
   446   000766  180E               	xorwf	main@c2^0,w,c
   447   000768  100F               	iorwf	(main@c2+1)^0,w,c
   448   00076A  A4D8               	btfss	status,2,c
   449   00076C  EFBA  F003         	goto	u401
   450   000770  EFBC  F003         	goto	u400
   451   000774                     u401:
   452   000774  EFBE  F003         	goto	l956
   453   000778                     u400:
   454   000778                     
   455                           ;lcd_motor.c: 45:                 c2=-1;
   456   000778  680E               	setf	main@c2^0,c
   457   00077A  680F               	setf	(main@c2+1)^0,c
   458   00077C                     l956:
   459                           
   460                           ;lcd_motor.c: 47:             c2++;
   461   00077C  4A0E               	infsnz	main@c2^0,f,c
   462   00077E  2A0F               	incf	(main@c2+1)^0,f,c
   463   000780                     l52:
   464   000780  BC82               	btfsc	3970,6,c	;volatile
   465   000782  EFC5  F003         	goto	u411
   466   000786  EFC7  F003         	goto	u410
   467   00078A                     u411:
   468   00078A  EFC0  F003         	goto	l52
   469   00078E                     u410:
   470   00078E                     
   471                           ;lcd_motor.c: 49:             lcdctrl(0xc0);
   472   00078E  0EC0               	movlw	192
   473   000790  EC5A  F004         	call	_lcdctrl
   474   000794                     
   475                           ;lcd_motor.c: 50:         if(c2==0){
   476   000794  500E               	movf	main@c2^0,w,c
   477   000796  100F               	iorwf	(main@c2+1)^0,w,c
   478   000798  A4D8               	btfss	status,2,c
   479   00079A  EFD1  F003         	goto	u421
   480   00079E  EFD3  F003         	goto	u420
   481   0007A2                     u421:
   482   0007A2  EFE3  F003         	goto	l966
   483   0007A6                     u420:
   484   0007A6                     
   485                           ;lcd_motor.c: 51:             motor2(0,1);
   486   0007A6  0E00               	movlw	0
   487   0007A8  6E02               	movwf	(motor2@x+1)^0,c
   488   0007AA  0E00               	movlw	0
   489   0007AC  6E01               	movwf	motor2@x^0,c
   490   0007AE  0E00               	movlw	0
   491   0007B0  6E04               	movwf	(motor2@y+1)^0,c
   492   0007B2  0E01               	movlw	1
   493   0007B4  6E03               	movwf	motor2@y^0,c
   494   0007B6  EC8C  F004         	call	_motor2	;wreg free
   495   0007BA                     
   496                           ;lcd_motor.c: 52:             lcdstring("clockwise>>    ");
   497   0007BA  0E39               	movlw	low STR_4
   498   0007BC  6E0B               	movwf	lcdstring@p^0,c
   499   0007BE  EC76  F004         	call	_lcdstring	;wreg free
   500                           
   501                           ;lcd_motor.c: 53:         }
   502   0007C2  EF40  F003         	goto	l922
   503   0007C6                     l966:
   504   0007C6  040E               	decf	main@c2^0,w,c
   505   0007C8  100F               	iorwf	(main@c2+1)^0,w,c
   506   0007CA  A4D8               	btfss	status,2,c
   507   0007CC  EFEA  F003         	goto	u431
   508   0007D0  EFEC  F003         	goto	u430
   509   0007D4                     u431:
   510   0007D4  EFFC  F003         	goto	l972
   511   0007D8                     u430:
   512   0007D8                     
   513                           ;lcd_motor.c: 55:             motor2(1,0);
   514   0007D8  0E00               	movlw	0
   515   0007DA  6E02               	movwf	(motor2@x+1)^0,c
   516   0007DC  0E01               	movlw	1
   517   0007DE  6E01               	movwf	motor2@x^0,c
   518   0007E0  0E00               	movlw	0
   519   0007E2  6E04               	movwf	(motor2@y+1)^0,c
   520   0007E4  0E00               	movlw	0
   521   0007E6  6E03               	movwf	motor2@y^0,c
   522   0007E8  EC8C  F004         	call	_motor2	;wreg free
   523   0007EC                     
   524                           ;lcd_motor.c: 56:             lcdstring("anticlockwise<<");
   525   0007EC  0E49               	movlw	low STR_2
   526   0007EE  6E0B               	movwf	lcdstring@p^0,c
   527   0007F0  EC76  F004         	call	_lcdstring	;wreg free
   528                           
   529                           ;lcd_motor.c: 57:         }
   530   0007F4  EF40  F003         	goto	l922
   531   0007F8                     l972:
   532   0007F8  0E02               	movlw	2
   533   0007FA  180E               	xorwf	main@c2^0,w,c
   534   0007FC  100F               	iorwf	(main@c2+1)^0,w,c
   535   0007FE  A4D8               	btfss	status,2,c
   536   000800  EF04  F004         	goto	u441
   537   000804  EF06  F004         	goto	u440
   538   000808                     u441:
   539   000808  EF16  F004         	goto	l50
   540   00080C                     u440:
   541   00080C                     
   542                           ;lcd_motor.c: 59:             motor2(0,0);
   543   00080C  0E00               	movlw	0
   544   00080E  6E02               	movwf	(motor2@x+1)^0,c
   545   000810  0E00               	movlw	0
   546   000812  6E01               	movwf	motor2@x^0,c
   547   000814  0E00               	movlw	0
   548   000816  6E04               	movwf	(motor2@y+1)^0,c
   549   000818  0E00               	movlw	0
   550   00081A  6E03               	movwf	motor2@y^0,c
   551   00081C  EC8C  F004         	call	_motor2	;wreg free
   552   000820                     
   553                           ;lcd_motor.c: 60:             lcdstring("!!!!!!!!stop!!!!!!!!");
   554   000820  0E01               	movlw	low STR_6
   555   000822  6E0B               	movwf	lcdstring@p^0,c
   556   000824  EC76  F004         	call	_lcdstring	;wreg free
   557   000828  EF40  F003         	goto	l922
   558   00082C                     l50:
   559   00082C  EF40  F003         	goto	l922
   560   000830  EF00  F000         	goto	start
   561   000834                     __end_of_main:
   562                           	callstack 0
   563                           
   564 ;; *************** function _motor2 *****************
   565 ;; Defined at:
   566 ;;		line 72 in file "lcd_motor.c"
   567 ;; Parameters:    Size  Location     Type
   568 ;;  x               2    0[COMRAM] int 
   569 ;;  y               2    2[COMRAM] int 
   570 ;; Auto vars:     Size  Location     Type
   571 ;;		None
   572 ;; Return value:  Size  Location     Type
   573 ;;                  1    wreg      void 
   574 ;; Registers used:
   575 ;;		None
   576 ;; Tracked objects:
   577 ;;		On entry : 0/0
   578 ;;		On exit  : 0/0
   579 ;;		Unchanged: 0/0
   580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   581 ;;      Params:         4       0       0       0       0       0       0
   582 ;;      Locals:         0       0       0       0       0       0       0
   583 ;;      Temps:          0       0       0       0       0       0       0
   584 ;;      Totals:         4       0       0       0       0       0       0
   585 ;;Total ram usage:        4 bytes
   586 ;; Hardware stack levels used: 1
   587 ;; This function calls:
   588 ;;		Nothing
   589 ;; This function is called by:
   590 ;;		_main
   591 ;; This function uses a non-reentrant model
   592 ;;
   593                           
   594                           	psect	text1
   595   000918                     __ptext1:
   596                           	callstack 0
   597   000918                     _motor2:
   598                           	callstack 30
   599   000918                     
   600                           ;lcd_motor.c: 73:     RB7=x;
   601   000918  B001               	btfsc	motor2@x^0,0,c
   602   00091A  EF91  F004         	goto	u291
   603   00091E  EF94  F004         	goto	u290
   604   000922                     u291:
   605   000922  8E81               	bsf	3969,7,c	;volatile
   606   000924  EF95  F004         	goto	u305
   607   000928                     u290:
   608   000928  9E81               	bcf	3969,7,c	;volatile
   609   00092A                     u305:
   610                           
   611                           ;lcd_motor.c: 74:     RB6=y;
   612   00092A  B003               	btfsc	motor2@y^0,0,c
   613   00092C  EF9A  F004         	goto	u311
   614   000930  EF9D  F004         	goto	u310
   615   000934                     u311:
   616   000934  8C81               	bsf	3969,6,c	;volatile
   617   000936  EF9E  F004         	goto	u325
   618   00093A                     u310:
   619   00093A  9C81               	bcf	3969,6,c	;volatile
   620   00093C                     u325:
   621   00093C  0012               	return		;funcret
   622   00093E                     __end_of_motor2:
   623                           	callstack 0
   624                           
   625 ;; *************** function _motor1 *****************
   626 ;; Defined at:
   627 ;;		line 67 in file "lcd_motor.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;  m               2    0[COMRAM] int 
   630 ;;  n               2    2[COMRAM] int 
   631 ;; Auto vars:     Size  Location     Type
   632 ;;		None
   633 ;; Return value:  Size  Location     Type
   634 ;;                  1    wreg      void 
   635 ;; Registers used:
   636 ;;		None
   637 ;; Tracked objects:
   638 ;;		On entry : 0/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   642 ;;      Params:         4       0       0       0       0       0       0
   643 ;;      Locals:         0       0       0       0       0       0       0
   644 ;;      Temps:          0       0       0       0       0       0       0
   645 ;;      Totals:         4       0       0       0       0       0       0
   646 ;;Total ram usage:        4 bytes
   647 ;; Hardware stack levels used: 1
   648 ;; This function calls:
   649 ;;		Nothing
   650 ;; This function is called by:
   651 ;;		_main
   652 ;; This function uses a non-reentrant model
   653 ;;
   654                           
   655                           	psect	text2
   656   00093E                     __ptext2:
   657                           	callstack 0
   658   00093E                     _motor1:
   659                           	callstack 30
   660   00093E                     
   661                           ;lcd_motor.c: 68:     RC3=m;
   662   00093E  B001               	btfsc	motor1@m^0,0,c
   663   000940  EFA4  F004         	goto	u241
   664   000944  EFA7  F004         	goto	u240
   665   000948                     u241:
   666   000948  8682               	bsf	3970,3,c	;volatile
   667   00094A  EFA8  F004         	goto	u255
   668   00094E                     u240:
   669   00094E  9682               	bcf	3970,3,c	;volatile
   670   000950                     u255:
   671                           
   672                           ;lcd_motor.c: 69:     RC4=n;
   673   000950  B003               	btfsc	motor1@n^0,0,c
   674   000952  EFAD  F004         	goto	u261
   675   000956  EFB0  F004         	goto	u260
   676   00095A                     u261:
   677   00095A  8882               	bsf	3970,4,c	;volatile
   678   00095C  EFB1  F004         	goto	u275
   679   000960                     u260:
   680   000960  9882               	bcf	3970,4,c	;volatile
   681   000962                     u275:
   682   000962  0012               	return		;funcret
   683   000964                     __end_of_motor1:
   684                           	callstack 0
   685                           
   686 ;; *************** function _lcdstring *****************
   687 ;; Defined at:
   688 ;;		line 97 in file "lcd_motor.c"
   689 ;; Parameters:    Size  Location     Type
   690 ;;  p               1   10[COMRAM] PTR const unsigned char 
   691 ;;		 -> STR_6(21), STR_5(16), STR_4(16), STR_3(18), 
   692 ;;		 -> STR_2(16), STR_1(17), 
   693 ;; Auto vars:     Size  Location     Type
   694 ;;		None
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      void 
   697 ;; Registers used:
   698 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   704 ;;      Params:         1       0       0       0       0       0       0
   705 ;;      Locals:         0       0       0       0       0       0       0
   706 ;;      Temps:          0       0       0       0       0       0       0
   707 ;;      Totals:         1       0       0       0       0       0       0
   708 ;;Total ram usage:        1 bytes
   709 ;; Hardware stack levels used: 1
   710 ;; Hardware stack levels required when called: 2
   711 ;; This function calls:
   712 ;;		_lcddisp
   713 ;; This function is called by:
   714 ;;		_main
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           	psect	text3
   719   0008EC                     __ptext3:
   720                           	callstack 0
   721   0008EC                     _lcdstring:
   722                           	callstack 28
   723   0008EC                     
   724                           ;lcd_motor.c: 98:     while(*p)
   725   0008EC  EF7F  F004         	goto	l906
   726   0008F0                     l902:
   727                           
   728                           ;lcd_motor.c: 99:     {;lcd_motor.c: 101:         lcddisp(*p);
   729   0008F0  C00B  FFF6         	movff	lcdstring@p,tblptrl
   730   0008F4                     	if	0	;There is only one active tblptr byte
   731   0008F4                     	endif
   732   0008F4                     	if	0	;tblptru may be non-zero
   733   0008F4                     	endif
   734   0008F4                     	if	0	;tblptru may be non-zero
   735   0008F4                     	endif
   736   0008F4  0008               	tblrd		*
   737   0008F6  50F5               	movf	tablat,w,c
   738   0008F8  EC3E  F004         	call	_lcddisp
   739   0008FC                     
   740                           ;lcd_motor.c: 102:         p++;
   741   0008FC  2A0B               	incf	lcdstring@p^0,f,c
   742   0008FE                     l906:
   743                           
   744                           ;lcd_motor.c: 98:     while(*p)
   745   0008FE  C00B  FFF6         	movff	lcdstring@p,tblptrl
   746   000902                     	if	0	;There is only one active tblptr byte
   747   000902                     	endif
   748   000902                     	if	0	;tblptru may be non-zero
   749   000902                     	endif
   750   000902                     	if	0	;tblptru may be non-zero
   751   000902                     	endif
   752   000902  0008               	tblrd		*
   753   000904  50F5               	movf	tablat,w,c
   754   000906  0900               	iorlw	0
   755   000908  A4D8               	btfss	status,2,c
   756   00090A  EF89  F004         	goto	u281
   757   00090E  EF8B  F004         	goto	u280
   758   000912                     u281:
   759   000912  EF78  F004         	goto	l902
   760   000916                     u280:
   761   000916  0012               	return		;funcret
   762   000918                     __end_of_lcdstring:
   763                           	callstack 0
   764                           
   765 ;; *************** function _lcddisp *****************
   766 ;; Defined at:
   767 ;;		line 88 in file "lcd_motor.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;  b               1    wreg     unsigned char 
   770 ;; Auto vars:     Size  Location     Type
   771 ;;  b               1    9[COMRAM] unsigned char 
   772 ;; Return value:  Size  Location     Type
   773 ;;                  1    wreg      void 
   774 ;; Registers used:
   775 ;;		wreg, status,2, status,0, cstack
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 0/0
   779 ;;		Unchanged: 0/0
   780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   781 ;;      Params:         0       0       0       0       0       0       0
   782 ;;      Locals:         1       0       0       0       0       0       0
   783 ;;      Temps:          0       0       0       0       0       0       0
   784 ;;      Totals:         1       0       0       0       0       0       0
   785 ;;Total ram usage:        1 bytes
   786 ;; Hardware stack levels used: 1
   787 ;; Hardware stack levels required when called: 1
   788 ;; This function calls:
   789 ;;		_delay
   790 ;; This function is called by:
   791 ;;		_lcdstring
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795                           	psect	text4
   796   00087C                     __ptext4:
   797                           	callstack 0
   798   00087C                     _lcddisp:
   799                           	callstack 28
   800                           
   801                           ;incstack = 0
   802                           ;lcddisp@b stored from wreg
   803   00087C  6E0A               	movwf	lcddisp@b^0,c
   804   00087E                     
   805                           ;lcd_motor.c: 89:     RC0=1;
   806   00087E  8082               	bsf	3970,0,c	;volatile
   807                           
   808                           ;lcd_motor.c: 90:     RC1=0;
   809   000880  9282               	bcf	3970,1,c	;volatile
   810   000882                     
   811                           ;lcd_motor.c: 91:     PORTD=b;
   812   000882  C00A  FF83         	movff	lcddisp@b,3971	;volatile
   813   000886                     
   814                           ;lcd_motor.c: 92:     RC2=1;
   815   000886  8482               	bsf	3970,2,c	;volatile
   816   000888                     
   817                           ;lcd_motor.c: 93:     delay(100);
   818   000888  0E64               	movlw	100
   819   00088A  6E01               	movwf	delay@time^0,c
   820   00088C  0E00               	movlw	0
   821   00088E  6E02               	movwf	(delay@time+1)^0,c
   822   000890  0E00               	movlw	0
   823   000892  6E03               	movwf	(delay@time+2)^0,c
   824   000894  0E00               	movlw	0
   825   000896  6E04               	movwf	(delay@time+3)^0,c
   826   000898  EC1A  F004         	call	_delay	;wreg free
   827   00089C                     
   828                           ;lcd_motor.c: 94:     RC2=0;
   829   00089C  9482               	bcf	3970,2,c	;volatile
   830   00089E                     
   831                           ;lcd_motor.c: 95:     delay(5000);
   832   00089E  0E88               	movlw	136
   833   0008A0  6E01               	movwf	delay@time^0,c
   834   0008A2  0E13               	movlw	19
   835   0008A4  6E02               	movwf	(delay@time+1)^0,c
   836   0008A6  0E00               	movlw	0
   837   0008A8  6E03               	movwf	(delay@time+2)^0,c
   838   0008AA  0E00               	movlw	0
   839   0008AC  6E04               	movwf	(delay@time+3)^0,c
   840   0008AE  EC1A  F004         	call	_delay	;wreg free
   841   0008B2  0012               	return		;funcret
   842   0008B4                     __end_of_lcddisp:
   843                           	callstack 0
   844                           
   845 ;; *************** function _lcdctrl *****************
   846 ;; Defined at:
   847 ;;		line 79 in file "lcd_motor.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;  a               1    wreg     unsigned char 
   850 ;; Auto vars:     Size  Location     Type
   851 ;;  a               1    9[COMRAM] unsigned char 
   852 ;; Return value:  Size  Location     Type
   853 ;;                  1    wreg      void 
   854 ;; Registers used:
   855 ;;		wreg, status,2, status,0, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   861 ;;      Params:         0       0       0       0       0       0       0
   862 ;;      Locals:         1       0       0       0       0       0       0
   863 ;;      Temps:          0       0       0       0       0       0       0
   864 ;;      Totals:         1       0       0       0       0       0       0
   865 ;;Total ram usage:        1 bytes
   866 ;; Hardware stack levels used: 1
   867 ;; Hardware stack levels required when called: 1
   868 ;; This function calls:
   869 ;;		_delay
   870 ;; This function is called by:
   871 ;;		_main
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875                           	psect	text5
   876   0008B4                     __ptext5:
   877                           	callstack 0
   878   0008B4                     _lcdctrl:
   879                           	callstack 29
   880                           
   881                           ;incstack = 0
   882                           ;lcdctrl@a stored from wreg
   883   0008B4  6E0A               	movwf	lcdctrl@a^0,c
   884   0008B6                     
   885                           ;lcd_motor.c: 80:     RC0=0;
   886   0008B6  9082               	bcf	3970,0,c	;volatile
   887                           
   888                           ;lcd_motor.c: 81:     RC1=0;
   889   0008B8  9282               	bcf	3970,1,c	;volatile
   890   0008BA                     
   891                           ;lcd_motor.c: 82:     PORTD=a;
   892   0008BA  C00A  FF83         	movff	lcdctrl@a,3971	;volatile
   893   0008BE                     
   894                           ;lcd_motor.c: 83:     RC2=1;
   895   0008BE  8482               	bsf	3970,2,c	;volatile
   896   0008C0                     
   897                           ;lcd_motor.c: 84:     delay(100);
   898   0008C0  0E64               	movlw	100
   899   0008C2  6E01               	movwf	delay@time^0,c
   900   0008C4  0E00               	movlw	0
   901   0008C6  6E02               	movwf	(delay@time+1)^0,c
   902   0008C8  0E00               	movlw	0
   903   0008CA  6E03               	movwf	(delay@time+2)^0,c
   904   0008CC  0E00               	movlw	0
   905   0008CE  6E04               	movwf	(delay@time+3)^0,c
   906   0008D0  EC1A  F004         	call	_delay	;wreg free
   907   0008D4                     
   908                           ;lcd_motor.c: 85:     RC2=0;
   909   0008D4  9482               	bcf	3970,2,c	;volatile
   910   0008D6                     
   911                           ;lcd_motor.c: 86:     delay(5000);
   912   0008D6  0E88               	movlw	136
   913   0008D8  6E01               	movwf	delay@time^0,c
   914   0008DA  0E13               	movlw	19
   915   0008DC  6E02               	movwf	(delay@time+1)^0,c
   916   0008DE  0E00               	movlw	0
   917   0008E0  6E03               	movwf	(delay@time+2)^0,c
   918   0008E2  0E00               	movlw	0
   919   0008E4  6E04               	movwf	(delay@time+3)^0,c
   920   0008E6  EC1A  F004         	call	_delay	;wreg free
   921   0008EA  0012               	return		;funcret
   922   0008EC                     __end_of_lcdctrl:
   923                           	callstack 0
   924                           
   925 ;; *************** function _delay *****************
   926 ;; Defined at:
   927 ;;		line 76 in file "lcd_motor.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;  time            4    0[COMRAM] long 
   930 ;; Auto vars:     Size  Location     Type
   931 ;;  i               4    5[COMRAM] long 
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, status,2, status,0
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   941 ;;      Params:         4       0       0       0       0       0       0
   942 ;;      Locals:         4       0       0       0       0       0       0
   943 ;;      Temps:          1       0       0       0       0       0       0
   944 ;;      Totals:         9       0       0       0       0       0       0
   945 ;;Total ram usage:        9 bytes
   946 ;; Hardware stack levels used: 1
   947 ;; This function calls:
   948 ;;		Nothing
   949 ;; This function is called by:
   950 ;;		_lcdctrl
   951 ;;		_lcddisp
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           	psect	text6
   956   000834                     __ptext6:
   957                           	callstack 0
   958   000834                     _delay:
   959                           	callstack 28
   960   000834                     
   961                           ;lcd_motor.c: 77:     for(long int i=0;i<time;i++);
   962   000834  0E00               	movlw	0
   963   000836  6E06               	movwf	delay@i^0,c
   964   000838  0E00               	movlw	0
   965   00083A  6E07               	movwf	(delay@i+1)^0,c
   966   00083C  0E00               	movlw	0
   967   00083E  6E08               	movwf	(delay@i+2)^0,c
   968   000840  0E00               	movlw	0
   969   000842  6E09               	movwf	(delay@i+3)^0,c
   970   000844  EF2A  F004         	goto	l71
   971   000848                     l872:
   972   000848  0E01               	movlw	1
   973   00084A  2606               	addwf	delay@i^0,f,c
   974   00084C  0E00               	movlw	0
   975   00084E  2207               	addwfc	(delay@i+1)^0,f,c
   976   000850  2208               	addwfc	(delay@i+2)^0,f,c
   977   000852  2209               	addwfc	(delay@i+3)^0,f,c
   978   000854                     l71:
   979   000854  5001               	movf	delay@time^0,w,c
   980   000856  5C06               	subwf	delay@i^0,w,c
   981   000858  5002               	movf	(delay@time+1)^0,w,c
   982   00085A  5807               	subwfb	(delay@i+1)^0,w,c
   983   00085C  5003               	movf	(delay@time+2)^0,w,c
   984   00085E  5808               	subwfb	(delay@i+2)^0,w,c
   985   000860  5009               	movf	(delay@i+3)^0,w,c
   986   000862  0A80               	xorlw	128
   987   000864  6E05               	movwf	??_delay^0,c
   988   000866  5004               	movf	(delay@time+3)^0,w,c
   989   000868  0A80               	xorlw	128
   990   00086A  5805               	subwfb	??_delay^0,w,c
   991   00086C  A0D8               	btfss	status,0,c
   992   00086E  EF3B  F004         	goto	u231
   993   000872  EF3D  F004         	goto	u230
   994   000876                     u231:
   995   000876  EF24  F004         	goto	l872
   996   00087A                     u230:
   997   00087A  0012               	return		;funcret
   998   00087C                     __end_of_delay:
   999                           	callstack 0
  1000                           
  1001                           	psect	rparam
  1002   000000                     tosu	equ	0xFFF
  1003                           tosh	equ	0xFFE
  1004                           tosl	equ	0xFFD
  1005                           stkptr	equ	0xFFC
  1006                           pclatu	equ	0xFFB
  1007                           pclath	equ	0xFFA
  1008                           pcl	equ	0xFF9
  1009                           tblptru	equ	0xFF8
  1010                           tblptrh	equ	0xFF7
  1011                           tblptrl	equ	0xFF6
  1012                           tablat	equ	0xFF5
  1013                           prodh	equ	0xFF4
  1014                           prodl	equ	0xFF3
  1015                           indf0	equ	0xFEF
  1016                           postinc0	equ	0xFEE
  1017                           postdec0	equ	0xFED
  1018                           preinc0	equ	0xFEC
  1019                           plusw0	equ	0xFEB
  1020                           fsr0h	equ	0xFEA
  1021                           fsr0l	equ	0xFE9
  1022                           wreg	equ	0xFE8
  1023                           indf1	equ	0xFE7
  1024                           postinc1	equ	0xFE6
  1025                           postdec1	equ	0xFE5
  1026                           preinc1	equ	0xFE4
  1027                           plusw1	equ	0xFE3
  1028                           fsr1h	equ	0xFE2
  1029                           fsr1l	equ	0xFE1
  1030                           bsr	equ	0xFE0
  1031                           indf2	equ	0xFDF
  1032                           postinc2	equ	0xFDE
  1033                           postdec2	equ	0xFDD
  1034                           preinc2	equ	0xFDC
  1035                           plusw2	equ	0xFDB
  1036                           fsr2h	equ	0xFDA
  1037                           fsr2l	equ	0xFD9
  1038                           status	equ	0xFD8

Data Sizes:
    Strings     88
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     15      15
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    lcdstring@p	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[17]), STR_2(CODE[16]), STR_3(CODE[18]), STR_4(CODE[16]), 
		 -> STR_5(CODE[16]), STR_6(CODE[21]), 


Critical Paths under _main in COMRAM

    _main->_lcdstring
    _lcdstring->_lcddisp
    _lcddisp->_delay
    _lcdctrl->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    2427
                                             11 COMRAM     4     4      0
                            _lcdctrl
                          _lcdstring
                             _motor1
                             _motor2
 ---------------------------------------------------------------------------------
 (1) _motor2                                               4     0      4     500
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _motor1                                               4     0      4     500
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _lcdstring                                            1     0      1     873
                                             10 COMRAM     1     0      1
                            _lcddisp
 ---------------------------------------------------------------------------------
 (2) _lcddisp                                              1     1      0     372
                                              9 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _lcdctrl                                              1     1      0     372
                                              9 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                9     5      4     350
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcdctrl
     _delay
   _lcdstring
     _lcddisp
       _delay
   _motor1
   _motor2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      F       F       1       15.8%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBIGSFRh          6A      0       0      16        0.0%
BITBIGSFRlh          F      0       0      17        0.0%
BITBIGSFRll        281      0       0      18        0.0%
ABS                  0      0       0      19        0.0%
BIGRAM             5FF      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Aug 06 09:53:32 2024

                     l50 082C                       l42 06AA                       l52 0780  
                     l46 0756                       l71 0854                       l80 08B2  
                     l65 0962                       l74 087A                       l68 093C  
                     l77 08EA                       l86 0916                      l900 08EC  
                    l902 08F0                      l910 065A                      l904 08FC  
                    l920 067C                      l912 0666                      l906 08FE  
                    l930 06B8                      l922 0680                      l914 066C  
                    l908 0918                      l940 0702                      l932 06BE  
                    l924 068E                      l916 0672                      l870 0834  
                    l942 0716                      l934 06D0                      l926 06A2  
                    l950 0756                      l918 0678                      l872 0848  
                    l880 0888                      l960 0794                      l952 0764  
                    l944 0722                      l936 06E4                      l928 06A6  
                    l890 08BE                      l882 089C                      l874 087E  
                    l970 07EC                      l962 07A6                      l954 0778  
                    l946 0736                      l938 06F0                      l892 08C0  
                    l884 089E                      l876 0882                      l972 07F8  
                    l964 07BA                      l956 077C                      l948 074A  
                    l894 08D4                      l886 08B6                      l878 0886  
                    l974 080C                      l966 07C6                      l958 078E  
                    l896 08D6                      l888 08BA                      l976 0820  
                    l968 07D8                      l898 093E                      _RC0 7C10  
                    _RC1 7C11                      _RC2 7C12                      _RC3 7C13  
                    _RC4 7C14                      _RB6 7C0E                      _RC5 7C15  
                    _RB7 7C0F                      _RC6 7C16                      u230 087A  
                    u310 093A                      u231 0876                      u311 0934  
                    u240 094E                      u400 0778                      u241 0948  
                    u305 092A                      u401 0774                      u410 078E  
                    u330 068E                      u411 078A                      u331 068A  
                    u260 0960                      u420 07A6                      u340 06A2  
                    u261 095A                      u325 093C                      u421 07A2  
                    u341 069E                      u430 07D8                      u350 06B8  
                    u255 0950                      u431 07D4                      u351 06B4  
                    u280 0916                      u440 080C                      u360 06D0  
                    u281 0912                      u441 0808                      u361 06CC  
                    u290 0928                      u370 0702                      u275 0962  
                    u291 0922                      u371 06FE                      u380 0736  
                    u381 0732                      u390 0764                      u391 0760  
                   STR_1 0628                     STR_2 0649                     STR_3 0616  
                   STR_4 0639                     STR_5 0649                     STR_6 0601  
                   _main 065A                     start 0000             ___param_bank 0000  
                  ?_main 0001                    _PORTD 0F83                    _TRISB 0F93  
                  _TRISC 0F94                    _TRISD 0F95          __end_of_lcddisp 08B4  
        __end_of_lcdctrl 08EC                    _delay 0834                    tablat 0FF5  
                  status 0FD8          __initialization 0964             __end_of_main 0834  
                 ??_main 000C            __activetblptr 0001                   ?_delay 0001  
                 delay@i 0006                   _motor1 093E                   _motor2 0918  
                 isa$std 0001                   main@c1 000C                   main@c2 000E  
              ??_lcddisp 000A                ??_lcdctrl 000A             __mediumconst 0000  
                 tblptrh 0FF7                   tblptrl 0FF6                   tblptru 0FF8  
             __accesstop 0060  __end_of__initialization 0964            ___rparam_used 0001  
         __pcstackCOMRAM 0001            __end_of_delay 087C                  ??_delay 0005  
                ?_motor1 0001                  ?_motor2 0001                  __Hparam 0000  
                __Lparam 0000             __psmallconst 0600                  __pcinit 0964  
                __ramtop 0600        __end_of_lcdstring 0918                  __ptext0 065A  
                __ptext1 0918                  __ptext2 093E                  __ptext3 08EC  
                __ptext4 087C                  __ptext5 08B4                  __ptext6 0834  
                _lcddisp 087C                  _lcdctrl 08B4     end_of_initialization 0964  
                motor1@m 0001                  motor1@n 0003                  motor2@x 0001  
                motor2@y 0003           __end_of_motor1 0964           __end_of_motor2 093E  
    start_initialization 0964               lcdstring@p 000B                 ??_motor1 0005  
               ??_motor2 0005                 ?_lcddisp 0001                 ?_lcdctrl 0001  
            __smallconst 0600                _lcdstring 08EC                delay@time 0001  
             ?_lcdstring 000B                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0600                 isa$xinst 0000                 lcddisp@b 000A  
               lcdctrl@a 000A              ??_lcdstring 000C  
